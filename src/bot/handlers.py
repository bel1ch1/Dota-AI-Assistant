from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from .keyboards import get_main_keyboard, get_back_keyboard
from .states import Question_about_game
from ai.llm_chains.question_about_game_chain import QuestionAboutGameChain

router = Router()
mechanics_chain = QuestionAboutGameChain()

@router.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = """
    ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ "–í–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ"!

    –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∏–≥—Ä–µ Dota 2:
    ‚Ä¢ –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ –º–µ—Ç–µ?
    ‚Ä¢ –ö–∞–∫ –∞–ø–Ω—É—Ç—å –ø—Ç—Å?
    ‚Ä¢ –ß—Ç–æ —Å–æ–±–∏—Ä–∞—Ç—å –Ω–∞ –ø—É–¥–∂–∞?
    ‚Ä¢ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å –Ω–∞ –ª–∞–π–Ω–µ?

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    """

    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    help_text = """
    üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

    /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –í–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ Dota 2

    üîß –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
    1. –ù–∞–∂–º–∏—Ç–µ "–í–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ"
    2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
    3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI-–¢—Ä–µ–Ω–µ—Ä–∞

    –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
    ‚Ä¢ "–ö—Ç–æ —Å–µ–π—á–∞—Å –≤ –º–µ—Ç–µ?"
    ‚Ä¢ "–ö–∞–∫ –≤—ã–π–≥—Ä–∞—Ç—å –ª–∞–π–Ω?"
    ‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å–±–æ—Ä–∫—É –Ω–∞ —Ñ–∞–Ω—Ç–æ–º–∫—É."
    """

    await message.answer(help_text, reply_markup=get_main_keyboard())

@router.message(F.text == "–í–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ")
async def start_mechanics_question(message: Message, state: FSMContext):
    await message.answer(
        "üí° –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –º–µ—Ö–∞–Ω–∏–∫–µ:\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –∑–∞ –ø—É–¥–∂–∞?'",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(Question_about_game.waiting_for_question)

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

@router.message(Question_about_game.waiting_for_question)
async def process_mechanics_question(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_main(message, state)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–¥—É–º–∞–µ—Ç"
    thinking_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        answer = await mechanics_chain.get_answer(message.text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        if len(answer) > 4096:
            for i in range(0, len(answer), 4096):
                await message.answer(answer[i:i+4096])
        else:
            await message.answer(answer)

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
        await thinking_msg.delete()

    await message.answer(
        "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_back_keyboard()
    )

@router.message()
async def unknown_message(message: Message):
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start",
        reply_markup=get_main_keyboard()
    )
