"""
Модуль для работы с промптами.
"""


from langchain_core.prompts import (
    PromptTemplate,
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
    FewShotChatMessagePromptTemplate,
)
from ai.pipelines.data_pipe.utils.structured_output_parser import (
    domain_segmentation_parser
)


#   base for creating few-shot ####################################################################
base_prompt = ChatPromptTemplate.from_messages(
    [
        ("human", "{input}"),
        ("ai", "{output}"),
    ]
)

#   Few Shot Prompt Examples ######################################################################
examples_few_shot_for_summary = [
    {
        "input": """
Ребята, всем привет! Если вам зашло это видео, обязательно поставьте лайк и подпишитесь на канал,
это очень важно для развития! Кстати, не забывайте зайти на мой стрим сегодня в 20:00,
будем качать ммр вместе. Так вот, насчет патча 7.35d: валв наконец-то понерфили героя Снайпера,
уменьшили ему дальность атаки на 50 единиц, что делает его значительно слабее на лайнинге.
""".replace('\n', ' '),
        "output": """
В патче 7.35d Valve понерфили Снайпера, уменьшив дальность его атаки на 50 единиц,
что значительно ослабляет его на лайнинге.""".replace('\n', ' ')
    },

    {
        "input": """
ОООО, ВЫ ГЛЯНИТЕ ЧТО Я СДЕЛАЛ! ЭТО БЕЗУМНЫЙ КОМБО С МАГНУСОМ! КСТАТИ, ИСПОЛЬЗУЙТЕ
ПРОМОКОД 'DOTA2024' ДЛЯ ПОЛУЧЕНИЯ БОНУСОВ НА ФОНБЕТЕ. Так вот, для успешного исполнения
комбо нужен был блинк на позицию, затем ульт и сразу же рефрешeр,
чтобы повторить.""".replace('\n', ' '),
        "output": """
Для успешного исполнения комбо с Магнусом нужен блинк на позицию, затем ульт
и сразу рефреш орб, чтобы повторить.""".replace('\n', ' ')
    },

    {
        "input": """
Всем ку! Перед тем как начать, хочу сказать спасибо нашему спонсору — магазину игровых
ковров 'GamerZone'. Переходите по ссылке в описании, там скидка 15% по промокоду 'DOTA'.
Собственно, мета на текущий момент сильно сместилась в сторону ранней агрессии. Команды
все чаще берут героев с сильным мидгеймом, такие как Пудж, Кунка и Легионка, чтобы давить
с 10-й минуты.""".replace('\n', ' '),
        "output": """
Мета на текущий момент сместилась в сторону ранней агрессии.
Команды чаще берут героев с сильным мидгеймом (Пудж, Кунка, Легионка),
чтобы давить с 10-й минуты.""".replace('\n', ' ')
    },

    {
        "input": """
Ну что, дорогие друзья, сегодня мы разберем самый имбовый билд на Сэнд Кинга в текущем патче!
Не забудьте подписаться и нажать колокольчик! Итак, ключевая особенность — это максимально
быстрый сбор аганима с последующей покупкой блинка. Аганим дает нам невероятный урон в ультимейте,
а блинк позволяет идельно входить в бой.""".replace('\n', ' '),
        "output": """
Ключевой билд на Сэнд Кинга — быстрая покупка аганима с последующей покупкой блинка.
Аганим усиливает урон, блинк позволяет эффективно входить в бой.""".replace('\n', ' ')
    },

    {
        "input": """
ВСЕМ ПРИВЕТ ЭТО ОПЯТЬ Я И МОЕ НОВОЕ БЕЗУМНОЕ ВИДЕО! КОРОЧЕ, СМОТРИТЕ КАК
Я РАЗНОШУ ВРАГА НА ТИНКЕРЕ! ПАЛЦЫ ВВЕРХ ЕСЛИ ПОНРАВИЛОСЬ! Так вот, стратегия заключается
в том, чтобы максимально быстро зафармить езериал и дагон. С езериалом ты можешь мгновенно
выключать любого корового героя противника, что дает твоей команде огромное преимущество
в командных боях.
""".replace('\n', ' '),
        "output": """
Стратегия игры на Тинкере заключается в быстром фарме etherial blade и hex.
Хекс позволяет мгновенно выключать кор героя противника, давая команде преимущество в боях.
""".replace('\n', ' ')
    }
]

#   System prompts ################################################################################
def system_summary_prompt():
    system_prompt = SystemMessagePromptTemplate.from_template(
        """
Ты - эксперт по анализу текста. Твоя - задача удалить из текста всю информацию,
которая не касается игры Dota 2, оставив только суть и ключевые моменты.
Оставляй всю информацию, связанную с обучающим контентом по игре Dota 2.
Удаляй всю информацию, которая не связана с обучающим контентом по игре Dota 2.
Например: реклама, просьбы поддержки авторов и истории не связанные с игрой.
Результат должен быть информативно плотным, но при этом четко разделен на отдельные темы.
""".replace('\n', ' '))

    return system_prompt

def system_prompt_for_dividing_text_to_domains():
    system_prompt ="""
Ты - эксперт по анализу и структурированию текстовой информации, специализирующийся на
тематике Dota 2.

Твоя задача:
1. Определить область знаний (домен), к которому относится часть текста
2. В каждом домене выделить отдельные топики.
3. Для каждой темы придумать заголовок, который описывает ее содержание и принадлежность. Например,
если часть текста относится к HeroMechanicsTips или к варианту MatchActionsTips, в котором
описываются советы по действиям при игре за героя, то в заголовке должна быть указана информация
о том, к какому герою относятся эти советы.

Всего возможно 4 домена:
1. HeroMechanicsTips
   Сюда относится информация, связанная с героями Dota 2:
   - сборки предметов
   - прокачка способностей
   - особенности героев и их механики

2. MatchActionsTips
   Сюда относится стратегическая информация о действиях в матчах:
   - тактические советы
   - стиль игры
   - принятие решений для достижения победы

3. BaseGameMechanics
   Сюда относится общая информация об игре, не относящаяся к героям или стратегиям:
   - количество и расположение объектов на карте
   - оптимальные маршруты фарма
   - преимущества от контроля над целевыми объектами

4. ComicStrategies
   Сюда относятся шуточные или нестандартные стратегии, не направленные на победу, а на развлечение.

Формируй информацию в topics так, чтобы она была

---

Требования к сегментации:
- Каждый сегмент должен принадлежать строго одному домену.
- Если часть текста не относится ни к одному домену, её можно игнорировать.
- Сегменты не должны пересекаться и должны покрывать только релевантные куски текста.

Формат вывода для каждого сегмента:
- domain: выбранный домен
- topics: список тем относящихся к домену

Формат вывода для каждого топика:
- title: заголовок описывающий тему
- text: текст относящийся к теме

---

Формат вывода должен строго соответствовать следующей схеме:
{format_instructions}

Текст для анализа:
{text}
"""

    return system_prompt

def system_prompt_for_dividing_domain_texts_to_topics():
    system_prompt = """
Раздели следующий текст на сегменты (topics), где каждый сегмент отражает только
одну законченную тему.

---

Требования к сегментации:
- Сегменты должны быть самостоятельными и содержать связный контекст.
- Внутри одного сегмента не должно быть нескольких разных тем.
- Длина сегмента должна быть достаточной для понимания контекста, но без избыточных отклонений.
- Текст в сегментах должен быть в виде строки без форматирования для md и других файлов.

Формат вывода (для каждого сегмента):
- title: Короткое название темы
- text: текст сегмента без форматирования

---

Текст для анализа:
{text}

Формат вывода:
{format_instructions}"""

    return system_prompt

#   Функции для описания ролей промптов ###########################################################
def few_shot_prompt_for_summary():
    few_shot_prompt_for_summary = FewShotChatMessagePromptTemplate(
        example_prompt=base_prompt,
        examples=examples_few_shot_for_summary
    )

    return few_shot_prompt_for_summary

#   Конечные промпты для определения шагов ########################################################
def text_summary_prompt():
    """
    Промпт с инструкциями по очищению текста от воды и ненужной информации, не связанной с
    доменными знаниями.
    """
    prompt = ChatPromptTemplate.from_messages([
        system_summary_prompt(),
        few_shot_prompt_for_summary(),
        HumanMessagePromptTemplate.from_template("{input_text}")
    ])

    return prompt


def domain_segmentation_prompt():
    """
    Промпт с инструкциями по разделению входного текста на доступные домены знаний.
    """
    prompt = PromptTemplate(
        template=system_prompt_for_dividing_text_to_domains(),
        input_variables=["text"],
        partial_variables={
            "format_instructions": domain_segmentation_parser.get_format_instructions()
        }
    )

    return prompt

def topic_segmentation_prompt():
    """
    Промпт с инструкциями по разделению текста входного домена на отдельные темы.
    """
    prompt = PromptTemplate(
        template=system_prompt_for_dividing_domain_texts_to_topics(),
        input_variables=["text"],
        partial_variables={
            "format_instructions": topic_segmentation_parser.get_format_instructions()
        }
    )

    return prompt


#   Проверка структуры промптов ###################################################################
# prompt = text_summary_prompt()
# print(prompt.invoke({"question": "Привет"}).to_messages())

# few_shot_prompt_for_summary.invoke({}).to_messages() вернет:
# [
#     HumanMessage(content='example input'), AIMessage(content='example output'),
# ]
